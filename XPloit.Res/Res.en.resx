<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Available_Commands" xml:space="preserve">
    <value>Available commands</value>
  </data>
  <data name="Command" xml:space="preserve">
    <value>Command</value>
  </data>
  <data name="Connecting_To" xml:space="preserve">
    <value>Connecting to '%0' ... </value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="Module_Not_Found" xml:space="preserve">
    <value>Module '%0' not found</value>
  </data>
  <data name="Nothing_To_Show" xml:space="preserve">
    <value>Nothing to show ... </value>
  </data>
  <data name="No_Help_Available" xml:space="preserve">
    <value>No help available for %0</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="Press_Any_Key" xml:space="preserve">
    <value>Press any key to continue</value>
  </data>
  <data name="Short" xml:space="preserve">
    <value>Short</value>
  </data>
  <data name="Starting_Listener" xml:space="preserve">
    <value>Starting listener '%0' ... </value>
  </data>
  <data name="Type_Help" xml:space="preserve">
    <value>Type "help &lt;command&gt;" for individual command help.</value>
  </data>
  <data name="Unknown_Command" xml:space="preserve">
    <value>Unknown command '%0'</value>
  </data>
  <data name="Help_For" xml:space="preserve">
    <value>Help for %0</value>
  </data>
  <data name="Could_Not_Find_Inner_Command" xml:space="preserve">
    <value>Could not find inner command "%0"</value>
  </data>
  <data name="Man_Help" xml:space="preserve">
    <value>help [command]

Displays a help text for the specified command, or displays a list of all available commands.</value>
  </data>
  <data name="Man_Exit" xml:space="preserve">
    <value>exit / quit

Exit xploit framework.</value>
  </data>
  <data name="Command_Incomplete" xml:space="preserve">
    <value>Command incomplete.</value>
  </data>
  <data name="Command_Not_Unique" xml:space="preserve">
    <value>Command &lt;%0&gt; not unique.</value>
  </data>
  <data name="Man_Use" xml:space="preserve">
    <value>use [module]

Use a XPloit module</value>
  </data>
  <data name="Man_Banner" xml:space="preserve">
    <value>banner

Show a beautiful xploit banner</value>
  </data>
  <data name="Man_Clear" xml:space="preserve">
    <value>clear / cls

Clear console</value>
  </data>
  <data name="Require_Module" xml:space="preserve">
    <value>At first, you need to use a module.
Example: "use &lt;module&gt;"</value>
  </data>
  <data name="Author" xml:space="preserve">
    <value>Author</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="DisclosureDate" xml:space="preserve">
    <value>Disclosure Date</value>
  </data>
  <data name="IsLocal" xml:space="preserve">
    <value>Is Local</value>
  </data>
  <data name="IsRemote" xml:space="preserve">
    <value>Is Remote</value>
  </data>
  <data name="References" xml:space="preserve">
    <value>References</value>
  </data>
  <data name="Targets" xml:space="preserve">
    <value>Targets</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Payload" xml:space="preserve">
    <value>Payload</value>
  </data>
  <data name="Target" xml:space="preserve">
    <value>Target</value>
  </data>
  <data name="Man_Show" xml:space="preserve">
    <value>show [options]

Show available information for the current module

  Available options:
  
  config/options - Displays the config for current module
  info           - Display info of the current module
  payloads       - Display available payloads for the current module
  targets        - Display available targets for the current module</value>
  </data>
  <data name="Incorrect_Command_Usage" xml:space="preserve">
    <value>Incorrect command ussage</value>
  </data>
  <data name="Module" xml:space="preserve">
    <value>Module</value>
  </data>
  <data name="Version" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="Encoders" xml:space="preserve">
    <value>Encoders</value>
  </data>
  <data name="Modules" xml:space="preserve">
    <value>Modules</value>
  </data>
  <data name="Payloads" xml:space="preserve">
    <value>Payloads</value>
  </data>
  <data name="Count" xml:space="preserve">
    <value>Count</value>
  </data>
  <data name="File" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="Version_Start" xml:space="preserve">
    <value>Welcome to Xploit Framework :)
Official openSource repository in: https://github.com/shargon/Xploit</value>
  </data>
  <data name="Man_Version" xml:space="preserve">
    <value>version

Displays the current version of Xploit framework</value>
  </data>
  <data name="Path" xml:space="preserve">
    <value>Path</value>
  </data>
  <data name="Man_Set" xml:space="preserve">
    <value>set [variable] [value]

Set a variable for the current module</value>
  </data>
  <data name="Error_Converting_Value" xml:space="preserve">
    <value>Error while convert input value</value>
  </data>
  <data name="Man_Cd" xml:space="preserve">
    <value>cd / cd.. / back

Un-use the current module</value>
  </data>
  <data name="Man_Check" xml:space="preserve">
    <value>check

Check the current module</value>
  </data>
  <data name="Man_Run" xml:space="preserve">
    <value>run / exploit

Run the current module</value>
  </data>
  <data name="Man_Search" xml:space="preserve">
    <value>search [query]

Search a module in the loaded modules</value>
  </data>
  <data name="Require_Set_Property" xml:space="preserve">
    <value>Its required to set the property %0 (use set %0 &lt;value&gt;)</value>
  </data>
  <data name="Check_CantCheck" xml:space="preserve">
    <value>This module haven't check</value>
  </data>
  <data name="Check_NotSure" xml:space="preserve">
    <value>Im not sure if the check was successful or not ... :S</value>
  </data>
  <data name="Run_Error" xml:space="preserve">
    <value>Error while running the module</value>
  </data>
  <data name="Check_Result" xml:space="preserve">
    <value>Checked result</value>
  </data>
  <data name="Job_Created" xml:space="preserve">
    <value>Job created</value>
  </data>
  <data name="Man_Set_Global" xml:space="preserve">
    <value>gset [variable] [value]

Set a global variable for the current module and the next call to this module</value>
  </data>
  <data name="Error_Reading_File" xml:space="preserve">
    <value>Error reading file '%0'</value>
  </data>
  <data name="Reading_File" xml:space="preserve">
    <value>Reading File '%0' ... </value>
  </data>
  <data name="Man_Kill" xml:space="preserve">
    <value>kill [job]

Kill the selected job</value>
  </data>
  <data name="Kill_Job" xml:space="preserve">
    <value>Kill job</value>
  </data>
  <data name="Man_Reload" xml:space="preserve">
    <value>reload

Reload the current module with the global variables</value>
  </data>
  <data name="Reloaded_Module" xml:space="preserve">
    <value>Module '%0' reloaded</value>
  </data>
  <data name="Man_Play" xml:space="preserve">
    <value>play [file]

Run the commands stored in a file</value>
  </data>
  <data name="File_Not_Exists" xml:space="preserve">
    <value>File '%0' doesn't exists</value>
  </data>
  <data name="Man_Jobs" xml:space="preserve">
    <value>jobs

List all current jobs</value>
  </data>
  <data name="Dead" xml:space="preserve">
    <value>Dead</value>
  </data>
  <data name="Running" xml:space="preserve">
    <value>Running</value>
  </data>
  <data name="Id" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Man_Load" xml:space="preserve">
    <value>load [file]

Load all modules from selected file</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Nops" xml:space="preserve">
    <value>Nops</value>
  </data>
  <data name="Man_RCheck" xml:space="preserve">
    <value>rcheck

Reload the current module and check them</value>
  </data>
  <data name="Man_ReRun" xml:space="preserve">
    <value>rerun/rexploit

Reload the current module and execute them</value>
  </data>
  <data name="Encoder" xml:space="preserve">
    <value>Encoder</value>
  </data>
  <data name="Nop" xml:space="preserve">
    <value>Nop</value>
  </data>
  <data name="Require_Module_Type" xml:space="preserve">
    <value>This command its only for '%0' type</value>
  </data>
  <data name="Man_Info" xml:space="preserve">
    <value>info

Show info of the current module</value>
  </data>
  <data name="Current_Target" xml:space="preserve">
    <value>Current Target</value>
  </data>
  <data name="Module_Options" xml:space="preserve">
    <value>Module options (%0)</value>
  </data>
  <data name="Payload_Options" xml:space="preserve">
    <value>Payload options (%0)</value>
  </data>
  <data name="Selected_Payload" xml:space="preserve">
    <value>Selected Payload</value>
  </data>
  <data name="Be_More_Specific" xml:space="preserve">
    <value>Be more specific</value>
  </data>
  <data name="Disclosure" xml:space="preserve">
    <value>Disclosure</value>
  </data>
  <data name="Man_IfCheck" xml:space="preserve">
    <value>ifcheck [command]

Check the module, and if works, then run the command</value>
  </data>
  <data name="Can_Be_Intrusive" xml:space="preserve">
    <value>This check can be intrusive, Continue? [Yes/No]</value>
  </data>
  <data name="File_Defined_Not_Exists" xml:space="preserve">
    <value>File defined in %0 not exists</value>
  </data>
  <data name="Folder_Required_Ask" xml:space="preserve">
    <value>The selected folder '%0' not exist, do yo want create?  [Yes/No]</value>
  </data>
  <data name="Folder_Required" xml:space="preserve">
    <value>Folder '%0' must exists</value>
  </data>
  <data name="Man_IfNoCheck" xml:space="preserve">
    <value>ifnocheck [command]

Check the module, and if not works, then run the command</value>
  </data>
  <data name="Aborting" xml:space="preserve">
    <value>Aborting ...</value>
  </data>
  <data name="Man_Record" xml:space="preserve">
    <value>record [option]

Start/Stop recording the input to a file

Options:

  stop      Stop the current record
  &lt;path&gt;    Start a record in this path</value>
  </data>
  <data name="No_Record" xml:space="preserve">
    <value>No active record ...</value>
  </data>
  <data name="Stop_Recording_Successful" xml:space="preserve">
    <value>Stop recording successful</value>
  </data>
  <data name="Start_Recording_Successful" xml:space="preserve">
    <value>Start recording successful</value>
  </data>
  <data name="Candidates" xml:space="preserve">
    <value>Candidates</value>
  </data>
  <data name="Did_You_Mean" xml:space="preserve">
    <value>Did you mean '%0'?</value>
  </data>
  <data name="Did_You_Mean_Or" xml:space="preserve">
    <value>Did you mean '%0' or '%1'?</value>
  </data>
  <data name="Show_All_Results" xml:space="preserve">
    <value>Show %0 results? [Yes/No/Top]"</value>
  </data>
  <data name="Man_Echo" xml:space="preserve">
    <value>echo [input]

Print the input</value>
  </data>
  <data name="Man_Beep" xml:space="preserve">
    <value>beep

Make a beep</value>
  </data>
  <data name="Man_IfNoRun" xml:space="preserve">
    <value>ifnorun [command]

Run the module, and if not works, then run the command</value>
  </data>
  <data name="Man_IfRun" xml:space="preserve">
    <value>ifrun [command]

Run the module, and if works, then run the command</value>
  </data>
</root>
